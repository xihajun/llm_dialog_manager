name: Publish to PyPI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    # paths-ignore:
    #   - 'llm_dialog_manager/__init__.py'
    #   - 'pyproject.toml'
    # TODO: fix version issue

permissions:
  contents: write      # Allows pushing to the repository
  pull-requests: write # Allows creating PRs if needed
  issues: write       # Allows creating issues if needed

jobs:
  publish:
    if: "!contains(github.event.head_commit.message, 'Bump version') && !contains(github.event.head_commit.message, 'bump version')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all history and tags are fetched
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel toml
      
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          CURRENT_VERSION=$(python -c '
          import toml
          import sys
          try:
              config = toml.load("pyproject.toml")
              if "project" not in config:
                  print("Error: Missing [project] section in pyproject.toml", file=sys.stderr)
                  sys.exit(1)
              print(config["project"]["version"])
          except Exception as e:
              print(f"Error: {str(e)}", file=sys.stderr)
              sys.exit(1)
          ')
          
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          echo "major_version=${major}" >> $GITHUB_OUTPUT
          echo "minor_version=${minor}" >> $GITHUB_OUTPUT
      
      - name: Check if version exists on PyPI
        id: check_pypi
        run: |
          PACKAGE_NAME=$(python -c "
          import toml
          config = toml.load('pyproject.toml')
          print(config['project']['name'])
          ")
          VERSION="${{ steps.get_version.outputs.current_version }}"
          PYPI_URL="https://pypi.org/pypi/${PACKAGE_NAME}/${VERSION}/json"
          
          echo "Checking PyPI for ${PACKAGE_NAME} version ${VERSION}..."
          
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$PYPI_URL")
          
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "Version ${VERSION} already exists on PyPI."
            NEW_VERSION="${VERSION}-dev"
            echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Version ${VERSION} is available on PyPI."
            echo "new_version=${VERSION}" >> $GITHUB_OUTPUT
          fi
      
      - name: Debug - Version Check
        run: |
          echo "New Version: ${{ steps.check_pypi.outputs.new_version }}"
      
      - name: Update version
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status
          
          # Use the new_version from the PyPI check
          NEW_VERSION="${{ steps.check_pypi.outputs.new_version }}"
          echo "Using new version: ${NEW_VERSION}"
          
          # Split version into major, minor, patch components
          IFS='.-' read -r major minor patch <<< "$NEW_VERSION"
          echo "Major: $major, Minor: $minor, Patch: $patch"
          
          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" llm_dialog_manager/__init__.py
          
          # Update version in pyproject.toml
          python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          data['project']['version'] = '${NEW_VERSION}'
          with open('pyproject.toml', 'w') as f:
              toml.dump(data, f)
          "
          
          # Commit the version update if it's a dev version
          if [[ "$NEW_VERSION" == *"-dev" ]]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add llm_dialog_manager/__init__.py pyproject.toml
            git commit -m "Bump version to ${NEW_VERSION} [skip ci]"
          fi
          
          # Tag the new version if it's not a dev version
          if [[ "$NEW_VERSION" != *"-dev" ]]; then
            git tag "v${NEW_VERSION}"
            git push origin main
            git push origin "v${NEW_VERSION}"
          fi
      
      - name: Build package
        run: python -m build
      
      - name: Publish to PyPI
        if: ${{ steps.check_pypi.outputs.new_version != format('{0}-dev', steps.get_version.outputs.current_version) }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
      
      - name: Publish to Test PyPI
        if: ${{ steps.check_pypi.outputs.new_version == format('{0}-dev', steps.get_version.outputs.current_version) }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
